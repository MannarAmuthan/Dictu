/**
 * sort.du
 *
 * Testing list sorting
 */
from UnitTest import UnitTest;

class TestListSort < UnitTest {
    testNumberListSort() {
        const x = [3, 6, 4, 1, 5];

        x.sort();
        this.assertEquals(x, [1, 3, 4, 5, 6]);
    }

    testNumberListSortAlreadySorted() {
        const x = [3, 6, 4, 1, 5];

        // Test sorting on an already sorted list.
        x.sort();
        this.assertEquals(x, [1, 3, 4, 5, 6]);
    }

    testNumberListSortNegative() {
        // Test sorting on negative values.
        const y = [3, 2, -1, 100, -3, 23, 1, -98];

        y.sort();
        this.assertEquals(y, [-98, -3, -1, 1, 2, 3, 23, 100]);

        y.sort();
        this.assertEquals(y, [-98, -3, -1, 1, 2, 3, 23, 100]);
    }

    testNumberListSortSameElements() {
        // Test sorting on lists containing equal elements
        const z = [3, 3, -3, 10, -3];

        z.sort();
        this.assertEquals(z, [-3, -3, 3, 3, 10]);

        z.sort();
        this.assertEquals(z, [-3, -3, 3, 3, 10]);
    }

    testStringListSort() {
        const x = ["apple", "dog", "ceo", "bee", "aero", "deep", "zebra", "cat"];

        x.sort();
        this.assertEquals(x, ["aero", "apple", "bee", "cat", "ceo", "deep", "dog", "zebra"]);
    }

    testStringListSortAlreadySorted() {
        const x = ["apple", "bee", "cat"];

        x.sort();
        this.assertEquals(x, ["apple", "bee", "cat"]);
    }

    testStringListSortSameElements() {
        // Test sorting on lists containing equal elements
        const z = ["abc", "cde", "abc", "cde"];

        z.sort();
        this.assertEquals(z, ["abc", "abc", "cde", "cde"]);

        z.sort();
        this.assertEquals(z, ["abc", "abc", "cde", "cde"]);
    }
}

TestListSort().run();