/**
 * classAnnotations.du
 *
 * Testing class classAnnotations
 */
from UnitTest import UnitTest;

class NoAnnotations {}

@EmptyAnnotation
@TrueAnnotation(true)
@FalseAnnotation(false)
@NumberAnnotation(10)
@DecimalNumberAnnotation(10.5)
@NilAnnotation(nil)
class Test {
    
    @EmptyAnnotation
    @TrueAnnotation(true)
    @FalseAnnotation(false)
    @NumberAnnotation(10)
    @DecimalNumberAnnotation(10.5)
    @NilAnnotation(nil)
    methodOnAClass() {}

    private noMethodAnnotations() {}
}

class WithAnnotatedInit {

    @InitAnnotation
    init() {}
}

class AnnotatedClassVars {
    @EmptyAnnotation
    @TrueAnnotation(true)
    @FalseAnnotation(false)
    @NumberAnnotation(10)
    @DecimalNumberAnnotation(10.5)
    @NilAnnotation(nil)
    var classVariable = 1;

    @EmptyAnnotation
    @TrueAnnotation(true)
    @FalseAnnotation(false)
    @NumberAnnotation(10)
    @DecimalNumberAnnotation(10.5)
    @NilAnnotation(nil)
    const classConstant = 2;
}


class TestClassAnnotations < UnitTest {
    testClassAnnotationsEmpty() {
        this.assertEquals(NoAnnotations.classAnnotations, nil);
    }

    testClassAnnotations() {
        this.assertEquals(Test.classAnnotations.len(), 6);
        this.assertEquals(Test.classAnnotations['EmptyAnnotation'], nil);
        this.assertEquals(Test.classAnnotations['TrueAnnotation'], true);
        this.assertEquals(Test.classAnnotations['FalseAnnotation'], false);
        this.assertEquals(Test.classAnnotations['NumberAnnotation'], 10);
        this.assertEquals(Test.classAnnotations['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(Test.classAnnotations['NilAnnotation'], nil);
    }

    testMethodAnnotations() {
        this.assertEquals(NoAnnotations.methodAnnotations, nil);

        this.assertEquals(Test.methodAnnotations.len(), 1);
        this.assertEquals(Test.methodAnnotations['methodOnAClass'].len(), 6);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['EmptyAnnotation'], nil);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['TrueAnnotation'], true);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['FalseAnnotation'], false);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['NumberAnnotation'], 10);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(Test.methodAnnotations['methodOnAClass']['NilAnnotation'], nil);
    }

    testClassVarAnnotations() {
        this.assertEquals(AnnotatedClassVars.variableAnnotations.len(), 2);

        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable'].len(), 6);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['EmptyAnnotation'], nil);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['TrueAnnotation'], true);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['FalseAnnotation'], false);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['NumberAnnotation'], 10);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classVariable']['NilAnnotation'], nil);

        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant'].len(), 6);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['EmptyAnnotation'], nil);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['TrueAnnotation'], true);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['FalseAnnotation'], false);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['NumberAnnotation'], 10);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['DecimalNumberAnnotation'], 10.5);
        this.assertEquals(AnnotatedClassVars.variableAnnotations['classConstant']['NilAnnotation'], nil);
    }

    testInitAnnotation() {
        this.assertEquals(WithAnnotatedInit.methodAnnotations['init']['InitAnnotation'], nil);
    }
}

TestClassAnnotations().run();